//---------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Telerik.DataAccess.Fluent.CodeGeneration GenerateDataLayer.ps1 script
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated. 
//     To extend this class please create an additional partial class definition and put your code there.
// </auto-generated>
//---------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;

namespace ApplicationLib.Entities
{
    public partial class ConnectionMetadataSource : FluentMetadataSource
    {
        protected override IList<MappingConfiguration> PrepareMapping()
        {
            List<MappingConfiguration> mappingConfigurations = new List<MappingConfiguration>()
            {
                this.GetUserConfiguration(),

            };
            return mappingConfigurations;
        }

        protected override void SetContainerSettings(MetadataContainer container)
        {
            container.Name = "Connection";
            container.DefaultNamespace = "ApplicationLib.Entities";
            container.NameGenerator.SourceStrategy = NamingSourceStrategy.Property;
            container.NameGenerator.RemoveCamelCase = false;
        }

        public MappingConfiguration<User> GetUserConfiguration()
        {
            var configuration = new MappingConfiguration<User>();

            configuration.MapType()
                         .WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed)
                         .ToTable("user");

            configuration.HasProperty(x => x.Id)
                .IsIdentity(KeyGenerator.Autoinc)
                .HasFieldName("id")
                .ToColumn("Id")
                .IsNotNullable()
                .WithOpenAccessType(OpenAccessType.Int32)
                .HasDefaultValue();
            
            configuration.HasProperty(x => x.Name)
                .HasFieldName("name")
                .ToColumn("Name")
                .IsNotNullable()
                .WithOpenAccessType(OpenAccessType.UnicodeStringVariableLength)
                .HasLength(255)
                .WithConverter<Anonimize.DataAccess.EncryptedString>();

            configuration.HasProperty(x => x.Email)
                .HasFieldName("email")
                .ToColumn("Email")
                .IsNotNullable()
                .WithOpenAccessType(OpenAccessType.UnicodeStringVariableLength)
                .HasLength(255)
                .WithConverter<Anonimize.DataAccess.EncryptedString>();

            configuration.HasProperty(x => x.Address)
                .HasFieldName("address")
                .ToColumn("Address")
                .IsNullable()
                .WithOpenAccessType(OpenAccessType.UnicodeStringVariableLength)
                .HasLength(255)
                .WithConverter<Anonimize.DataAccess.EncryptedString>();

            configuration.HasProperty(x => x.CivilId)
                .HasFieldName("civilId")
                .ToColumn("CivilId")
                .IsNotNullable()
                .WithOpenAccessType(OpenAccessType.Int32)
                .WithConverter<Anonimize.DataAccess.EncryptedInt32>();

            configuration.HasProperty(x => x.FiscalId)
                .HasFieldName("fiscalId")
                .ToColumn("FiscalId")
                .IsNullable()
                .WithOpenAccessType(OpenAccessType.Int32)
                .WithConverter<Anonimize.DataAccess.EncryptedInt32Nullable>();

            configuration.HasProperty(x => x.AccountBalance)
                .HasFieldName("accountBalance")
                .ToColumn("AccountBalance")
                .IsNotNullable()
                .WithOpenAccessType(OpenAccessType.Decimal)
                .HasPrecision(16)
                .HasScale(4)
                .WithConverter<Anonimize.DataAccess.EncryptedDecimal>();

            configuration.HasProperty(x => x.AccountDebt)
                .HasFieldName("accountDebt")
                .ToColumn("AccountDebt")
                .IsNullable()
                .WithOpenAccessType(OpenAccessType.Decimal)
                .HasPrecision(16)
                .HasScale(4)
                .WithConverter<Anonimize.DataAccess.EncryptedDecimalNullable>();

            configuration.HasProperty(x => x.IsFemale)
                .HasFieldName("isFemale")
                .ToColumn("IsFemale")
                .IsNullable()
                .WithOpenAccessType(OpenAccessType.Byte)
                .WithConverter<Anonimize.DataAccess.EncryptedBooleanNullable>();

            configuration.HasProperty(x => x.IsActive)
                .HasFieldName("isActive")
                .ToColumn("IsActive")
                .IsNotNullable()
                .WithOpenAccessType(OpenAccessType.Byte)
                .WithConverter<Anonimize.DataAccess.EncryptedBoolean>();

            configuration.HasProperty(x => x.DateCreated)
                .HasFieldName("dateCreated")
                .ToColumn("DateCreated")
                .IsNotNullable()
                .WithOpenAccessType(OpenAccessType.DateTime)
                .WithConverter<Anonimize.DataAccess.EncryptedDateTime>();

            configuration.HasProperty(x => x.DateUpdated)
                .HasFieldName("dateUpdated")
                .ToColumn("DateUpdated")
                .IsNullable()
                .WithOpenAccessType(OpenAccessType.DateTime)
                .WithConverter<Anonimize.DataAccess.EncryptedDateTimeNullable>();

            return configuration;
        }


    }
}
